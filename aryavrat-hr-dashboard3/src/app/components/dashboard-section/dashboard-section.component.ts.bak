import { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ChartModule } from 'primeng/chart';
import { TableModule } from 'primeng/table';
import { ButtonModule } from 'primeng/button';
import { DropdownModule } from 'primeng/dropdown';
import { CardModule } from 'primeng/card';
import { DataService } from '../../services/data.service';
import { FilterService } from '../../services/filter.service';

@Component({
  selector: 'app-dashboard-section',
  standalone: true,
  imports: [CommonModule, RouterModule, ChartModule, TableModule, ButtonModule, DropdownModule, CardModule],
  imports: [CommonModule, BaseChartDirective],
  template: `
    <div class="dashboard-container">
      <div class="header-container">
        <div class="header-content">
          <h1>Dashboard Overview</h1>
          <div class="header-actions">
            <div class="date-range">
              <span>Last 30 days</span>
              <i class="pi pi-chevron-down"></i>
            </div>
            <button class="export-btn">
              <i class="pi pi-download"></i>
              Export
            </button>
          </div>
        </div>
      </div>
      
      <div class="kpi-grid">
        <div class="kpi-card">
          <div class="kpi-header">
            <div class="kpi-icon" style="background-color: #E3F5FF;">
              <i class="pi pi-users" style="color: #0D99FF;"></i>
            </div>
            <div class="kpi-trend up">
              <i class="pi pi-arrow-up"></i>
              <span>20%</span>
            </div>
          </div>
          <div class="kpi-value">3,054</div>
          <div class="kpi-label">Total Employees</div>
          <div class="kpi-compare">vs last 30 days</div>
        </div>
        
        <div class="kpi-card">
          <div class="kpi-header">
            <div class="kpi-icon" style="background-color: #E3FFE9;">
              <i class="pi pi-user-plus" style="color: #2ED47A;"></i>
            </div>
            <div class="kpi-trend up">
              <i class="pi pi-arrow-up"></i>
              <span>20%</span>
            </div>
          </div>
          <div class="kpi-value">22</div>
          <div class="kpi-label">New Hires</div>
          <div class="kpi-compare">vs last 30 days</div>
        </div>
        
        <div class="kpi-card">
          <div class="kpi-header">
            <div class="kpi-icon" style="background-color: #FFF2E5;">
              <i class="pi pi-sign-out" style="color: #FF9F43;"></i>
            </div>
            <div class="kpi-trend down">
              <i class="pi pi-arrow-down"></i>
              <span>20%</span>
            </div>
          </div>
          <div class="kpi-value">12</div>
          <div class="kpi-label">Total Terminations</div>
          <div class="kpi-compare">vs last 30 days</div>
        </div>
        
        <div class="kpi-card">
          <div class="kpi-header">
            <div class="kpi-icon" style="background-color: #F5E3FF;">
              <i class="pi pi-calendar" style="color: #9C27B0;"></i>
            </div>
            <div class="kpi-trend up">
              <i class="pi pi-arrow-up"></i>
              <span>20%</span>
            </div>
          </div>
          <div class="kpi-value">12</div>
          <div class="kpi-label">Total Time Off</div>
          <div class="kpi-compare">vs last 30 days</div>
        </div>
      </div>
      
      <div class="chart-container">
        <div class="chart-card">
          <div class="chart-header">
            <h3>Employee Distribution</h3>
            <div class="chart-actions">
              <button class="chart-action-btn">This Year</button>
              <button class="chart-action-btn active">This Month</button>
              <button class="chart-action-btn">This Week</button>
              <button class="chart-action-btn">
                <i class="pi pi-ellipsis-h"></i>
              </button>
            </div>
          </div>
          <div class="chart-content">
            <canvas baseChart [data]="employeeDistributionData" [options]="doughnutOptions" type="doughnut"></canvas>
          </div>
        </div>
        
        <div class="chart-card">
          <div class="chart-header">
            <h3>Hiring Candidates</h3>
            <div class="chart-actions">
              <button class="chart-action-btn">This Year</button>
              <button class="chart-action-btn active">This Month</button>
              <button class="chart-action-btn">This Week</button>
              <button class="chart-action-btn">
                <i class="pi pi-ellipsis-h"></i>
              </button>
            </div>
          </div>
          <div class="chart-content">
            <canvas baseChart [data]="hiringCandidatesData" [options]="barOptions" type="bar"></canvas>
          </div>
        </div>
      </div>
          <div class="widget-content">
            <canvas *ngIf="isBrowser" baseChart [data]="attendanceTrendData" [options]="lineOptions" type="line"></canvas>
            <div *ngIf="!isBrowser" class="chart-placeholder">Attendance Trend Chart</div>
          </div>
        </div>
        <div class="widget">
          <div class="widget-header">
            <h3 class="widget-title">Department Overview</h3>
            <span class="widget-actions">üè¢</span>
          </div>
          <div class="widget-content">
            <canvas *ngIf="isBrowser" baseChart [data]="deptChartData" [options]="barOptions" type="bar"></canvas>
            <div *ngIf="!isBrowser" class="chart-placeholder">Department Chart</div>
          </div>
        </div>
        <div class="widget">
          <div class="widget-header">
            <h3 class="widget-title">Leave Status Distribution</h3>
            <span class="widget-actions">üèñÔ∏è</span>
          </div>
          <div class="widget-content">
            <canvas *ngIf="isBrowser" baseChart [data]="leaveStatusData" [options]="doughnutOptions" type="doughnut"></canvas>
            <div *ngIf="!isBrowser" class="chart-placeholder">Leave Status Chart</div>
          </div>
        </div>
      </div>
      
      <div class="dashboard-grid two-column">
        <div class="widget">
          <div class="widget-header">
            <h3 class="widget-title">Performance Overview</h3>
            <span class="widget-actions">‚≠ê</span>
          </div>
          <div class="widget-content">
            <canvas *ngIf="isBrowser" baseChart [data]="performanceData" [options]="barOptions" type="bar"></canvas>
            <div *ngIf="!isBrowser" class="chart-placeholder">Performance Chart</div>
          </div>
        </div>
        <div class="widget">
          <div class="widget-header">
            <h3 class="widget-title">Recruitment Pipeline</h3>
            <span class="widget-actions">üë•</span>
          </div>
          <div class="widget-content">
            <canvas *ngIf="isBrowser" baseChart [data]="recruitmentData" [options]="horizontalBarOptions" type="bar"></canvas>
            <div *ngIf="!isBrowser" class="chart-placeholder">Recruitment Chart</div>
          </div>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .dashboard-container {
      padding: 0;
      height: auto;
      background: transparent;
    }
    .chart-placeholder {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--text-muted);
      font-style: italic;
      min-height: 180px;
    }
    .widget {
      min-height: 220px;
    }
    .widget-content {
      min-height: 150px;
    }
  `]
})
export class DashboardSectionComponent implements OnInit {
  // Office policy
  private readonly officeDayHours = 9.5; // 9:30 hours per day
  summary = { 
    headcount: 0, 
    activeLeaves: 0, 
    attendanceRate: 95, 
    newHires: 8 
  };
  isBrowser: boolean;
  
  // Attendance tracking
  attendanceToday = {
    present: 0,
    target: 0,
    notPresent: 0
  };
  
  // Gauge chart data
  attendanceGaugeData: any = {
    datasets: [{
      data: [0, 0],
      backgroundColor: ['#16A34A', '#E5E7EB']
    }],
    labels: ['Present', 'Absent']
  };
  
  // KPIs
  kpis = {
    attendancePct: 0
  };
  
  // Overtime range
  overtimeRange = 'week';
  
  attendanceTrendData: ChartConfiguration['data'] = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    datasets: [{ 
      label: 'Attendance %',
      data: [94, 96, 93, 95, 97, 95], 
      borderColor: '#2563EB',
      backgroundColor: 'rgba(37, 99, 235, 0.1)',
      fill: true,
      tension: 0.4,
      pointBackgroundColor: '#2563EB',
      pointBorderColor: '#fff',
      pointBorderWidth: 2,
      pointRadius: 4
    }]
  };

  leaveStatusData: ChartConfiguration['data'] = {
    labels: ['Approved', 'Pending', 'Rejected'],
    datasets: [{ 
      data: [65, 25, 10], 
      backgroundColor: ['#16A34A', '#F59E0B', '#DC2626'],
      borderWidth: 0,
      hoverBackgroundColor: ['#15803d', '#d97706', '#b91c1c']
    }]
  };

  performanceData: ChartConfiguration['data'] = {
    labels: ['Excellent', 'Good', 'Average', 'Needs Improvement'],
    datasets: [{ 
      label: 'Employees', 
      data: [12, 18, 8, 3], 
      backgroundColor: ['#16A34A', '#2563EB', '#F59E0B', '#DC2626'],
      borderRadius: 4,
      borderSkipped: false
    }]
  };

  recruitmentData: ChartConfiguration['data'] = {
    labels: ['Applied', 'Screening', 'Interview', 'Offer', 'Hired'],
    datasets: [{ 
      label: 'Candidates', 
      data: [45, 28, 15, 8, 5], 
      backgroundColor: ['#E5E7EB', '#93C5FD', '#60A5FA', '#3B82F6', '#1D4ED8'],
      borderRadius: 4,
      borderSkipped: false
    }]
  };
  
  deptChartData: ChartConfiguration['data'] = {
    labels: [],
    datasets: [{ 
      label: 'Employees', 
      data: [], 
      backgroundColor: ['#2563EB', '#0D9488', '#7C3AED', '#F59E0B', '#16A34A', '#DC2626'],
      borderRadius: 4,
      borderSkipped: false
    }]
  };
  
  lineOptions: ChartConfiguration['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { 
      legend: { display: false },
      tooltip: {
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleColor: '#fff',
        bodyColor: '#fff',
        cornerRadius: 6
      }
    },
    scales: { 
      y: { 
        beginAtZero: true,
        max: 100,
        grid: { color: 'rgba(0,0,0,0.05)' },
        ticks: { 
          font: { size: 9 },
          callback: function(value) { return value + '%'; }
        }
      },
      x: {
        grid: { display: false },
        ticks: { font: { size: 9 } }
      }
    },
    elements: {
      point: { radius: 3, hoverRadius: 5 }
    },
    layout: {
      padding: { top: 15, bottom: 15, left: 15, right: 15 }
    }
  };

  doughnutOptions: ChartConfiguration['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { 
      legend: { 
        position: 'bottom',
        labels: {
          padding: 8,
          usePointStyle: true,
          font: { size: 9 },
          boxWidth: 10,
          boxHeight: 10
        }
      },
      tooltip: {
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleColor: '#fff',
        bodyColor: '#fff',
        cornerRadius: 6
      }
    },
    layout: {
      padding: { top: 10, bottom: 10, left: 10, right: 10 }
    }
  };

  horizontalBarOptions: ChartConfiguration['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    indexAxis: 'y' as const,
    plugins: { 
      legend: { display: false },
      tooltip: { enabled: true }
    },
    scales: { 
      x: { 
        beginAtZero: true,
        grid: { display: false },
        ticks: { font: { size: 9 } }
      },
      y: {
        grid: { display: false },
        ticks: { font: { size: 9 } }
      }
    },
    elements: {
      bar: {
        borderRadius: 3,
        borderSkipped: false
      }
    },
    layout: {
      padding: { top: 15, bottom: 15, left: 15, right: 15 }
    }
  };
  
  barOptions: ChartConfiguration['options'] = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: { 
      legend: { display: false },
      tooltip: { enabled: true }
    },
    scales: { 
      y: { 
        beginAtZero: true,
        grid: { display: false },
        ticks: { 
          font: { size: 9 },
          maxTicksLimit: 5
        }
      },
      x: {
        grid: { display: false },
        ticks: { 
          font: { size: 9 },
          maxRotation: 0
        }
      }
    },
    elements: {
      bar: {
        borderRadius: 3,
        borderSkipped: false
      }
    },
    layout: {
      padding: { top: 15, bottom: 15, left: 15, right: 15 }
    }
  };

  constructor(
    private dataService: DataService, 
    private filterService: FilterService,
    @Inject(PLATFORM_ID) platformId: Object
  ) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  ngOnInit() {
    if (this.isBrowser) {
      combineLatest([
        this.dataService.getAttendanceData(),
        this.dataService.getLeaveData(),
        this.filterService.globalFilters
      ]).pipe(
        map(([attendance, leaves, filters]) => {
          const filteredAttendance = this.applyFilters(attendance, filters);
          const filteredLeaves = this.applyLeaveFilters(leaves, filters);
          return { filteredAttendance, filteredLeaves };
        })
      ).subscribe({
        next: ({ filteredAttendance, filteredLeaves }) => {
          // Compute headcount from unique employee IDs in filtered attendance
          const uniqueIds = new Set((filteredAttendance || []).map((r: any) => r.user_id));
          this.summary.headcount = uniqueIds.size;

          // Update attendance-related KPIs and gauge
          this.updateAttendanceKPIs(filteredAttendance);

          // Update leave-related KPIs (weekly %)
          this.updateLeavesKPIs(filteredLeaves, filteredAttendance);

          // Update charts (dept distribution etc.)
          this.updateCharts(filteredAttendance);
          
          // Update overtime weekly for 14-20 July using 9.5h policy
          this.updateOvertimeFromAttendance(filteredAttendance);
        },
        error: (error) => {
          console.error('Error loading dashboard data:', error);
        }
      });
    }
    
    // Initialize overtime view
    this.setOvertimeRange(this.overtimeRange);
  }

  private getWeekRange(date: Date): { start: Date; end: Date } {
    const start = new Date(date);
    const end = new Date(date);
    // Set to start of week (Monday)
    const day = start.getDay();
    const diff = start.getDate() - day + (day === 0 ? -6 : 1); // Adjust when day is Sunday
    start.setDate(diff);
    // Set to end of week (Sunday)
    end.setDate(start.getDate() + 6);
    return { start, end };
  }

  private updateAttendanceKPIs(rows: any[]) {
    const list = rows || [];
    // Reset when no data
    if (!list.length) {
      this.attendanceToday.present = 0;
      this.attendanceToday.target = 0;
      this.attendanceToday.notPresent = 0;
      if (this.attendanceGaugeData?.datasets?.[0]) {
        this.attendanceGaugeData.datasets[0].data = [0, 0];
      }
      (this.kpis as any).attendancePct = 0 as any;
      return;
    }

    // Determine latest working day (skip 2nd/4th Saturdays)
    const uniqueDateKeys = new Set<string>();
    for (const r of list) {
      const d = this.parseActDate(r.act_date);
      if (d instanceof Date && !isNaN(d.getTime())) {
        uniqueDateKeys.add(d.toDateString());
      }
    }
    const sortedDates = Array.from(uniqueDateKeys)
      .map(k => new Date(k))
      .filter(d => !isNaN(d.getTime()))
      .sort((a, b) => b.getTime() - a.getTime());

    let latest: Date | undefined;
    for (const d of sortedDates) {
      if (!this.isSecondOrFourthSaturday(d)) {
        latest = d;
        break;
      }
    }
    if (!latest && sortedDates.length) latest = sortedDates[0];

    // Compute present for latest day with 9.5h threshold
    let present = 0;
    const seen = new Set<string>();
    if (latest) {
      for (const r of list) {
        const d = this.parseActDate(r.act_date);
        if (isNaN(d.getTime())) continue;
        if (
          d.getFullYear() === latest.getFullYear() &&
          d.getMonth() === latest.getMonth() &&
          d.getDate() === latest.getDate()
        ) {
          const total = Number(r.total_time);
          if (!isNaN(total) && total >= this.officeDayHours) {
            const id = String(r.user_id);
            if (!seen.has(id)) {
              seen.add(id);
              present++;
            }
          }
        }
      }
    }

    const target = Number(this.summary.headcount || 0);
    const remaining = Math.max(target - present, 0);

    this.attendanceToday.present = present;
    this.attendanceToday.target = target;
    this.attendanceToday.notPresent = remaining;

    if (this.attendanceGaugeData?.datasets?.[0]) {
      this.attendanceGaugeData.datasets[0].data = [present, remaining];
    }

    // Weekly attendance KPI: unique employees present at least once during latest week (>= 9.5h)
    if (latest && target > 0) {
      const { start: weekStart, end: weekEnd } = this.getWeekRange(latest);
      const weekPresentIds = new Set<string>();
      for (const r of list) {
        const d = this.parseActDate(r.act_date);
        if (isNaN(d.getTime())) continue;
        if (d >= weekStart && d <= weekEnd) {
          const t = Number(r.total_time);
          if (!isNaN(t) && t >= this.officeDayHours) {
            weekPresentIds.add(String(r.user_id));
          }
        }
      }
      const weekPct = Math.round(((weekPresentIds.size / target) * 100) * 100) / 100;
      (this.kpis as any).attendancePct = Number.isFinite(weekPct) ? (weekPct as any) : 0 as any;
    } else {
      (this.kpis as any).attendancePct = 0 as any;
    }
  }

  private parseActDate(value: any): Date {
    if (value instanceof Date) return value;
    if (typeof value !== 'string') return new Date(NaN);
    // Format appears to be d/m/yyyy
    const parts = value.split('/');
    if (parts.length >= 3) {
      const d = Number(parts[0]);
      const m = Number(parts[1]);
      const y = Number(parts[2]);
      if (!isNaN(d) && !isNaN(m) && !isNaN(y)) {
        return new Date(y, m - 1, d);
      }
    }
    const fallback = new Date(value);
    return fallback;
  }
  
  // 2nd and 4th Saturdays are office off
  private isSecondOrFourthSaturday(date: Date): boolean {
    if (date.getDay() !== 6) return false; // not Saturday
    const nth = this.getSaturdayIndexInMonth(date);
    return nth === 2 || nth === 4;
  }

  private getSaturdayIndexInMonth(date: Date): number {
    // 1-based index of Saturday occurrence in the month for the given date
    const year = date.getFullYear();
    const month = date.getMonth();
    const dayOfMonth = date.getDate();
    const first = new Date(year, month, 1);
    const firstDay = first.getDay(); // 0 Sun .. 6 Sat
    const firstSaturdayDate = 1 + ((6 - firstDay + 7) % 7);
    if (dayOfMonth < firstSaturdayDate) return 0;
    return Math.floor((dayOfMonth - firstSaturdayDate) / 7) + 1;
  }

  private getDepartmentCounts(users: any[]): Record<string, number> {
    const deptCounts: Record<string, number> = {};
    
    for (const user of users) {
      if (user?.department) {
        deptCounts[user.department] = (deptCounts[user.department] || 0) + 1;
      }
    }
    
    return deptCounts;
  }

  private applyFilters(data: any[], filters: any): any[] {
    if (!data?.length) return [];
    if (!filters) return data;
    
    return data.filter(item => {
      // Apply department filter
      if (filters.department && item.department !== filters.department) {
        return false;
      }
      // Apply team filter if needed
      if (filters.team && item.team !== filters.team) {
        return false;
      }
      // Apply search filter if needed
      if (filters.search && !`${item.first_name || ''} ${item.last_name || ''}`.toLowerCase().includes(filters.search.toLowerCase())) {
        return false;
      }
      // Apply date range filter if needed
      if ((filters.startDate || filters.endDate) && item.act_date) {
        const itemDate = this.parseActDate(item.act_date);
        if (filters.startDate && itemDate < filters.startDate) return false;
        if (filters.endDate && itemDate > filters.endDate) return false;
      }
      return true;
    });
  }

  private updateCharts(users: any[]) {
    if (!users?.length) return;
    
    // Get unique employees from the data
    const uniqueEmployees = users.reduce((acc, user) => {
      if (user?.user_id) {
        acc[user.user_id] = user;
      }
      return acc;
    }, {} as Record<string, any>);

    // Update department chart data
    const deptCounts = this.getDepartmentCounts(Object.values(uniqueEmployees));
    if (this.deptChartData) {
      this.deptChartData.labels = Object.keys(deptCounts);
      if (this.deptChartData.datasets?.[0]) {
        this.deptChartData.datasets[0].data = Object.values(deptCounts);
      }
    }

    // Update attendance trend with some variation
    if (this.attendanceTrendData?.datasets?.[0]) {
      this.summary.newHires = Math.floor(Math.random() * 5) + 6; // 6-10 new hires
      
      // Update attendance trend with some variation
      const baseAttendance = [94, 96, 93, 95, 97, 95];
      this.attendanceTrendData.datasets[0].data = baseAttendance.map(val => 
        val + Math.floor(Math.random() * 4) - 2 // ¬±2% variation
      );
    }
  }
  
  private applyLeaveFilters(leaves: any[], filters: any) {
    if (!leaves) return [];
    return leaves.filter(leave => {
      if (filters?.department && leave.department !== filters.department) return false;
      if (filters?.team && leave.team !== filters.team) return false;
      return true;
    });
  }
  
  private updateLeavesKPIs(leaves: any[], attendance: any[]) {
    if (!leaves?.length || !attendance?.length) {
      this.summary.activeLeaves = 0;
      return;
    }
    
    try {
      // Count unique employees on leave (simple implementation)
      const leaveTakers = new Set(leaves
        .filter(leave => leave?.user_id)
        .map(leave => String(leave.user_id))
      );
      this.summary.activeLeaves = leaveTakers.size;
    } catch (error) {
      console.error('Error updating leave KPIs:', error);
      this.summary.activeLeaves = 0;
    }
  }
  
  private updateOvertimeFromAttendance(attendance: any[]) {
    // Implementation for overtime calculation
    // This can be enhanced based on specific requirements
    console.log('Updating overtime data', attendance?.length);
  }
  
  private setOvertimeRange(range: string) {
    // Implementation for setting overtime range
    this.overtimeRange = range;
  }
}